name: _Reusable Build Python application

on:
  workflow_call:
    inputs:
      RUNS_ON:
        description: Platform to execute on
        type: string
        default: ubuntu-latest      
      JF_ARTIFACTORY_URL:
        description: JFrog Artifactory URL
        type: string
        default: https://your-jfrog-instance.jfrog.io/artifactory
        required: true  
      JF_PROJECT:
        description: JFrog Artifactory project
        type: string
        default: my-project
      JF_APP_NAME:
        description: JFrog Artifactory application name
        type: string
        default: my-app
      JF_PYTHON_REPOSITORY:
        description: Virtual Python repository
        type: string
        default: python-virtual
      JF_PYTHON_MODULE_NAME:
        description: JFrog Artifactory Python module name
        type: string
        default: jfrog-python-example
      JF_PACKAGE_TAG:
        description: Remote Python repository
        type: string
        default: tag_1234
      JF_WORKING_DIRECTORY:
        description: Working directory for the build
        type: string
        default: python
    secrets:
      JF_ACCESS_TOKEN:
        required: true

jobs:
  build:
    name: Build NodeJS app
    env:
      JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      JF_ARTIFACTORY_URL: ${{ inputs.JF_ARTIFACTORY_URL }}
      JF_PYTHON_REPOSITORY: ${{ inputs.JF_PYTHON_REPOSITORY }}
      JF_APP_NAME: ${{ inputs.JF_APP_NAME }}
      JF_PROJECT: ${{ inputs.JF_PROJECT }}
      JF_PYTHON_MODULE_NAME: ${{ inputs.JF_PYTHON_MODULE_NAME }}
      JF_PACKAGE_TAG: ${{ inputs.JF_PACKAGE_TAG }}
      JF_WORKING_DIRECTORY: ${{ inputs.JF_WORKING_DIRECTORY }}

    runs-on: ${{ inputs.RUNS_ON }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install jfrog cli
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_PROJECT: ${{ env.JF_PROJECT }}

      - name: Check environmental variables
        if: ${{ always() }}
        run: printenv | sort -f

      - name: Install Wheel
        run: |
          python -m pip install wheel

      - name: JFrog PYTHON Configuration
        run: |
          cd ${{ env.JF_WORKING_DIRECTORY }}
          jf pip-config --repo-resolve=${{ env.JF_PYTHON_REPOSITORY }}
          pwd
          jf pip install -r requirements.txt --build-name ${{ env.JF_APP_NAME }} --build-number ${{ env.JF_PACKAGE_TAG }} --module=${{ env.JF_PYTHON_MODULE_NAME }}
          python setup.py sdist bdist_wheel
          jf rt u dist/ ${{ env.JF_PYTHON_REPOSITORY }}/ --build-name ${{ env.JF_APP_NAME }} --build-number ${{ env.JF_PACKAGE_TAG }} --module=${{ env.JF_PYTHON_MODULE_NAME }} --project ${{ env.JF_PROJECT }} 

          jf rt bce --project ${{ env.JF_PROJECT }} ${{ env.JF_APP_NAME }} ${{ env.JF_PACKAGE_TAG }}
          jf rt bp  --project ${{ env.JF_PROJECT }} ${{ env.JF_APP_NAME }} ${{ env.JF_PACKAGE_TAG }}
          jf pip install ${{ env.JF_PYTHON_MODULE_NAME }}
          pip show ${{ env.JF_PYTHON_MODULE_NAME }}


