name: _Reusable Build NodeJS application

on:
  workflow_call:
    inputs:
      RUNS_ON:
        description: Platform to execute on
        type: string
        default: ubuntu-latest      
      JF_ARTIFACTORY_URL:
        description: JFrog Artifactory URL
        type: string
        default: https://your-jfrog-instance.jfrog.io/artifactory
        required: true  
      JF_PROJECT:
        description: JFrog Artifactory project
        type: string
        default: my-project
      JF_APP_NAME:
        description: JFrog Artifactory application name
        type: string
        default: my-app
      JF_NPM_LOCAL_REPOSITORY:
        description: Local npm repository
        type: string
        default: npm-local
      JF_NPM_REMOTE_REPOSITORY:
        description: Remote npm repository
        type: string
        default: npm-remote
      JF_PACKAGE_TAG:
        description: Remote npm repository
        type: string
        default: npm-remote
      JF_WORKING_DIRECTORY:
        description: Working directory for the build
        type: string
        default: npm-example
    secrets:
      JF_ACCESS_TOKEN:
        required: true

jobs:
  build:
    name: Build NodeJS app
    env:
      JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      JF_ARTIFACTORY_URL: ${{ inputs.JF_ARTIFACTORY_URL }}
      JF_NPM_LOCAL_REPOSITORY: ${{ inputs.JF_NPM_LOCAL_REPOSITORY }}
      JF_NPM_REMOTE_REPOSITORY: ${{ inputs.JF_NPM_REMOTE_REPOSITORY }}
      JF_APP_NAME: ${{ inputs.JF_APP_NAME }}
      JF_PROJECT: ${{ inputs.JF_PROJECT }}
      JF_PACKAGE_TAG: ${{ inputs.JF_PACKAGE_TAG }}
      JF_WORKING_DIRECTORY: ${{ inputs.JF_WORKING_DIRECTORY }}

    runs-on: ${{ inputs.RUNS_ON }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install jfrog cli
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_PROJECT: ${{ env.JF_PROJECT }}

      #- name: Setup Jfrog cli
      #  run: jf c add jfrog-server --url=${{ env.JF_ARTIFACTORY_URL }} --access-token=${{ secrets.JF_ACCESS_TOKEN }}
      #  working-directory: ${{ env.JF_WORKING_DIRECTORY }}

      - name: Check environmental variables
        if: ${{ always() }}
        run: printenv | sort -f

      - name: JFrog NPM Configuration
        run: |
          cd ${{ env.JF_WORKING_DIRECTORY }}
          jf npm-config --repo-resolve=${{ env.JF_NPM_REMOTE_REPOSITORY }} --repo-deploy=${{ env.JF_NPM_LOCAL_REPOSITORY }}
          pwd
          jf npm install --build-name ${{ env.JF_APP_NAME }} --build-number ${{ env.JF_PACKAGE_TAG }}
          jf rt bce --project ${{ env.JF_PROJECT }} ${{ env.JF_APP_NAME }} ${{ env.JF_PACKAGE_TAG }}
          jf rt bag --project ${{ env.JF_PROJECT }} ${{ env.JF_APP_NAME }} ${{ env.JF_PACKAGE_TAG }}
          jf npm publish --project ${{ env.JF_PROJECT }} --build-name ${{ env.JF_APP_NAME }} --build-number ${{ env.JF_PACKAGE_TAG }}
          jf rt bp --project ${{ env.JF_PROJECT }} ${{ env.JF_APP_NAME }} ${{ env.JF_PACKAGE_TAG }}
        
